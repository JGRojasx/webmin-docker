name: Docker Build and Publish

on:
  push:
    branches:
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - develop

env:
  IMAGE_NAME: webmin

jobs:
  # Job para preparar metadata y tags
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      sha_tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value={{branch}}-{{sha}},enable=${{ github.ref != 'refs/heads/master' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long

  # Job para construir y publicar la imagen
  build:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ needs.prepare.outputs.tags }}
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job para pruebas en AMD64
  test-amd64:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Test AMD64 container
        run: |
          TAG=${{ github.ref == 'refs/heads/master' && 'latest' || format('{0}-{1}', github.ref_name, github.sha) }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}
          docker run -d --name test-webmin-amd64 -p 10000:10000 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}
          sleep 30
          docker ps
          docker logs test-webmin-amd64
          curl -k --retry 5 --retry-delay 10 https://localhost:10000/ || exit 1

  # Job para pruebas en ARM64 usando emulaci√≥n
  test-arm64:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Test ARM64 container
        run: |
          TAG=${{ github.ref == 'refs/heads/master' && 'latest' || format('{0}-{1}', github.ref_name, github.sha) }}
          docker pull --platform linux/arm64 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}
          docker run --platform linux/arm64 -d --name test-webmin-arm64 -p 10001:10000 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}
          sleep 30
          docker ps
          docker logs test-webmin-arm64
          curl -k --retry 5 --retry-delay 10 https://localhost:10001/ || exit 1

  # Job final que espera que todas las pruebas pasen
  success:
    needs: [test-amd64, test-arm64]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Success
        run: echo "All tests passed successfully!"